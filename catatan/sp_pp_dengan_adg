alter procedure [dbo].[pp_bdy_v3] (
	@kode_farm varchar(10),
	@noreg varchar(30),
	@tgl_kebutuhan_awal date,
	@tgl_kebutuhan_akhir date,
	@tgl_awal_ganti_pakan date
)
/* manambahkan ADG sebagai komponen penentu rekomendasi pakan */
 as
/*declare @kode_farm varchar(10) = 'CJ'
declare @noreg varchar(30) = 'CJ/2019-6/08'
declare @tgl_kebutuhan_awal date = '2019-12-08',
	@tgl_kebutuhan_akhir date = '2019-12-19',
	@tgl_awal_ganti_pakan date = NULL
*/	
begin
SET NOCOUNT ON;
declare @umur int,@pakan1 varchar(30),@pakan2 varchar(30),@jml_ganti_pakan int, @keb_pakan int, @adg_pengali float,@tmp_adg_pengali float
declare @umur_awal int,@umur_akhir int,@std_budidaya varchar(20),@docin date
declare @ganti_pakan table(
	umur int,
	pakan varchar(30),
	komposisi_pakan decimal(5,2),
	kebutuhan_pakan int
)
/* cari docin dan standart yang digunakan */
select ks.*
	,datediff(day,ks.tgl_doc_in,@tgl_kebutuhan_awal) umur_awal
	,datediff(day,ks.tgl_doc_in,@tgl_kebutuhan_akhir) umur_akhir
into #ks
from kandang_siklus ks
where ks.no_reg = @noreg 

select top 1
	@umur_awal = ks.umur_awal,
	@umur_akhir = ks.umur_akhir,
	@std_budidaya = ks.KODE_STD_BUDIDAYA,
	@docin = ks.tgl_doc_in	
from #ks ks
select x.umur_awal umur_awal
	,x.kode_barang
	,ROW_NUMBER() over(order by x.umur_awal) urut_pakan
 into #tmp_ganti_pakan_std
from (
select max(md.std_umur) - 1 umur_awal,md.kode_barang from M_STD_BUDIDAYA_D md
	where md.KODE_STD_BUDIDAYA = @std_budidaya 
	group by md.kode_barang
) x
order by x.umur_awal

-- cari tanggal awal ganti pakan
select datediff(day,@docin,min(le.tgl_kebutuhan)) umur_awal
				,gps.urut_pakan - 1 urut_ganti
		 into #awal_ganti_pakan
		 from lpb l
				inner join lpb_e le
					on l.no_lpb = le.no_lpb and le.no_reg = @noreg
					and le.komposisi_pakan = .25
					and le.TGL_KEBUTUHAN < @tgl_kebutuhan_awal
				join #tmp_ganti_pakan_std gps
					on gps.kode_barang = le.kode_barang  and gps.urut_pakan > 1
		where l.status_lpb = 'A'
				group by gps.urut_pakan
select  coalesce(y.umur_awal,x.umur_awal) umur_awal
		,x.kode_barang
		,x.urut_pakan
	into #ganti_pakan_std
from
	#tmp_ganti_pakan_std x
	left join #awal_ganti_pakan y
	on y.urut_ganti = x.urut_pakan


-- cari jumlah pergantian pakan
--select @jml_ganti_pakan = count(*) + 1
select @jml_ganti_pakan = (select count(*) + 1 from #awal_ganti_pakan)

 -- jika @tgl_awal_ganti_pakan tidak null berarti sudah ada roses pergantian pakan
 if @tgl_awal_ganti_pakan is not null and @jml_ganti_pakan < (select count(*) from #ganti_pakan_std)
	update #ganti_pakan_std set umur_awal = datediff(day,@docin,@tgl_awal_ganti_pakan) where urut_pakan = @jml_ganti_pakan
 else if @umur_awal > (select umur_awal from #ganti_pakan_std where urut_pakan = @jml_ganti_pakan) and @jml_ganti_pakan < (select count(*) from #ganti_pakan_std)
  	update #ganti_pakan_std set umur_awal = datediff(day,@docin,@tgl_kebutuhan_awal) where urut_pakan = @jml_ganti_pakan

declare @tmp_awal int = 1, @tmp_akhir int, @selisih int, @awal_ganti int, @pakan_sebelumnya varchar(30)
DECLARE CUR CURSOR FOR
select t.umur_awal
		,t.kode_barang
		,t2.kode_barang
from #ganti_pakan_std t
left join #ganti_pakan_std t2
	on (t.urut_pakan + 1 ) = t2.urut_pakan
-- where t2.kode_barang is not null

OPEN CUR
FETCH NEXT FROM CUR INTO @umur, @pakan1, @pakan2
WHILE @@FETCH_STATUS = 0 BEGIN
	set @tmp_akhir = @umur
	while(@tmp_awal <= @tmp_akhir) begin
	set @keb_pakan = (select PKN_HR from M_STD_BUDIDAYA_D where KODE_STD_BUDIDAYA = @std_budidaya and STD_UMUR = @tmp_awal)
	set @selisih = @tmp_awal - @awal_ganti
		if @selisih = 0 and @pakan2 is not null
			begin
				insert into @ganti_pakan
			select *
			from
			(
				select @tmp_awal umur
					,@pakan1 pakan1
					,.75 'komposisi_pakan'
					,@keb_pakan keb_pakan
				union all
				select @tmp_awal umur
					,@pakan2 pakan1
					,.25 'komposisi_pakan'
					,@keb_pakan keb_pakan
			)x
			end
		else if @selisih = 1 -- and @pakan2 is not null
			begin
				insert into @ganti_pakan
			select *
			from
			(
				select @tmp_awal umur
					,@pakan1 pakan1
					,.5 'komposisi_pakan'
					,@keb_pakan keb_pakan
				union all
				select @tmp_awal umur
					,@pakan_sebelumnya pakan1
					,.5 'komposisi_pakan'
					,@keb_pakan keb_pakan
			)x
			end
		else if @selisih = 2 -- and @pakan2 is not null
			begin
				insert into @ganti_pakan
			select *
			from
			(
				select @tmp_awal umur
					,@pakan1 pakan1
					,.75 'komposisi_pakan'
					,@keb_pakan keb_pakan
				union all
				select @tmp_awal umur
					,@pakan_sebelumnya pakan1
					,.25 'komposisi_pakan'
					,@keb_pakan keb_pakan
			)x
			end
		else begin
				insert into @ganti_pakan
			select *
			from
			(
				select @tmp_awal umur
					,@pakan1 pakan1
					,1 'komposisi_pakan'
					,@keb_pakan keb_pakan
			)x
			end
		set @tmp_awal = @tmp_awal + 1
		if @umur = @tmp_awal
		begin
			set @pakan_sebelumnya = @pakan1
			set @awal_ganti = @umur
		end
	end

FETCH NEXT FROM CUR INTO @umur, @pakan1, @pakan2
end
CLOSE CUR
DEALLOCATE CUR


-- cari lhk terakhir dan pengali adg
select lhk_adg.* 
		,case 
			when (lhk_adg.adg is null or lhk_adg.adg_standart is null) then 1
			else (lhk_adg.adg / lhk_adg.adg_standart)
		end adg_pengali
into #lhk
from (
	select lhk_tmp.tgl_transaksi
			,lhk_tmp.no_reg
			,lhk_tmp.populasi
			,lhk_tmp.berat_badan
			,lhk_tmp.kons
			,lhk_tmp.kons_standart
			,lhk_tmp.adg
			,lhk_tmp.adg_standart
	from (
		select rhk.tgl_transaksi
				,rhk.no_reg
				,rhk.C_JUMLAH populasi
				,rhk.C_BERAT_BADAN berat_badan
				,(select (sum(BRT_PAKAI) / rhk.C_JUMLAH) * 1000  from rhk_pakan where rhk_pakan.NO_REG = rhk.no_reg and rhk_pakan.TGL_TRANSAKSI = rhk.tgl_transaksi) as kons
				,(select PKN_HR from M_STD_BUDIDAYA_D where KODE_STD_BUDIDAYA = @std_budidaya and STD_UMUR = datediff(day,@docin,rhk.tgl_transaksi) ) as kons_standart
				-- berat badan kemarin atau saat timbang
				,dbo.ADG_VALUE(@noreg,r.lhk_terakhir) as adg
				,dbo.ADGSTANDART_VALUE(@noreg,r.lhk_terakhir) as adg_standart						
		from rhk
		inner join(
			select max(tgl_transaksi) lhk_terakhir,no_reg
			from rhk
			where no_reg = @noreg
			group by no_reg
		)r
		on r.lhk_terakhir = rhk.tgl_transaksi and r.no_reg = rhk.no_reg
	)lhk_tmp
)lhk_adg
-- set default
set @tmp_adg_pengali = (select top 1 adg_pengali from #lhk)
set @adg_pengali = 1
if @tmp_adg_pengali is not null set @adg_pengali = @tmp_adg_pengali

select ks.kode_kandang,
	gp.pakan kode_barang,
	convert(float,coalesce(l.populasi,ks.jml_populasi) * gp.kebutuhan_pakan )/50000 kebutuhan_pakan_standart,
	-- jika dibawah umur 10, maka abaikan pengali adg
	case when gp.umur < 12 then
		convert(float,coalesce(l.populasi,ks.jml_populasi) * gp.kebutuhan_pakan * coalesce(gp.komposisi_pakan,1))/50000
	else 
		convert(float,coalesce(l.populasi,ks.jml_populasi) * gp.kebutuhan_pakan * coalesce(gp.komposisi_pakan,1) * @adg_pengali)/50000
	end kebutuhan_pakan,
	ks.no_reg,
	l.tgl_transaksi lhk_terakhir,
	l.adg,
	l.adg_standart,
	l.kons,
	l.kons_standart,
	coalesce(l.populasi,ks.jml_populasi) populasi,
	dateadd(day,gp.umur,@docin) tglkebutuhan,
	gp.umur umur,
	mb.nama_barang nama_barang,
	dbo.BENTUK_CONVERTION(mb.bentuk_barang) bentuk,
	case
		when gp.komposisi_pakan is null then 1
		else gp.komposisi_pakan
	end komposisi_pakan
from #ks ks
inner join @ganti_pakan gp
	on gp.umur between @umur_awal and @umur_akhir
inner join m_barang mb
	on mb.KODE_BARANG = gp.pakan
left join #lhk l
	on l.NO_REG = ks.NO_REG
left join #ganti_pakan_std gps
	on gps.kode_barang = gp.pakan
order by gps.urut_pakan,gp.umur

drop table #ks
drop table #lhk
drop table #ganti_pakan_std
drop table #tmp_ganti_pakan_std
drop table #awal_ganti_pakan
end;


alter procedure [dbo].[get_sisa_pakan_bdy_v2](
	@kode_farm varchar(10),
	@no_lpb varchar(20),
	@noreg varchar(30)
)
as
begin
set nocount on
declare @rhk_kandang as table(
	no_reg varchar(20),
	rhkterkahir date
)
-- cari total pakan yang telah dikirim ke kandang
declare @pakan_kirim_kandang as table(
	no_reg varchar(20),
	kode_barang varchar(20),
	jenis_kelamin char(1),
	jumlah int
)
-- cari total pakan yang seharusnya telah dikirim ke kandang
/*
declare @pakan_kirim_dari_gudang as table(
	no_reg varchar(20),
	kode_barang varchar(20),
	jenis_kelamin char(1),
	jumlah int
)
*/
declare @total_pp as table(
	no_reg varchar(20),
	kode_barang varchar(20),
	jenis_kelamin char(1),
	jumlah int
)

declare @konsumsi_pakan_total as table(
	no_reg varchar(20),
	kode_barang varchar(20),
	jenis_kelamin char(1),
	konsumsi int
)

declare @total_retur as table(
	no_reg varchar(20),
	kode_barang varchar(20),
	jenis_kelamin char(1),
	jumlah int
)

declare @retur_saat_pp as table(
	no_reg varchar(20),
	kode_barang varchar(20),
	jenis_kelamin char(1),
	jumlah int
)

declare @hutang_pp_sebelumnya as table(
	no_reg varchar(20),
	jenis_kelamin char(1),
	kode_barang varchar(20),
	hutang_pp numeric(15,3),
	pengurang_pp int
)

declare @approve_retur_sak as table(
	no_reg varchar(20),
	keputusan char(1),
	retur_sak_kosong uniqueidentifier
)

declare @param varchar(max)

declare @query_total_pp varchar(max)
declare @pp_lalu varchar(30)
declare @tgl_pp varchar(30)
declare @tgl_pp_lama varchar(30)

if @no_lpb is null 
	begin
		set @tgl_pp = getdate()
		set @param = ''
		select top 1 @tgl_pp_lama = l.tgl_buat,@pp_lalu = l.no_lpb 
		from lpb l
		inner join lpb_e le
			on l.no_lpb = le.no_lpb AND le.NO_REG = @noreg		
		where l.STATUS_LPB = 'A' and l.kode_farm = @kode_farm
		order by l.tgl_buat desc
		
		if @pp_lalu != ''
			begin
			insert into @hutang_pp_sebelumnya
					select no_reg
							,jenis_kelamin
							,kode_barang
							,case 
								when abs(sum(JML_ORDER) - sum(JML_ORDER_TANPA_PEMBULATAN)) > 1 then 0
								when abs(sum(JML_ORDER) - sum(JML_ORDER_TANPA_PEMBULATAN)) < 0 then 0
								else abs(sum(JML_ORDER) - sum(JML_ORDER_TANPA_PEMBULATAN))
							end
							,sum(PENGURANG_PP) 
						from lpb_e 					
						where no_lpb = @pp_lalu
						group by no_lpb,no_reg,jenis_kelamin,kode_barang 
					
			end
		
	end
else
	begin
		set @tgl_pp = (select top 1 l.TGL_BUAT from lpb l where l.no_lpb = @no_lpb )
		set @param = 'and l.tgl_buat < '''+@tgl_pp+''''
		select top 1 @tgl_pp_lama = l.tgl_buat,@pp_lalu = l.no_lpb 
		from lpb l
		inner join lpb_e le
			on l.no_lpb = le.no_lpb AND le.NO_REG = @noreg		
		where l.STATUS_LPB = 'A' and l.kode_farm = @kode_farm and l.tgl_buat < @tgl_pp
		order by l.tgl_buat desc
	--	select top 1 @tgl_pp_lama = tgl_buat,@pp_lalu = no_lpb from lpb where kode_farm = @kode_farm and status_lpb = 'A' and tgl_buat < @tgl_pp order by tgl_buat desc
		
		if @pp_lalu != ''
			begin
			insert into @hutang_pp_sebelumnya
					select no_reg
							,jenis_kelamin
							,kode_barang
							,case 
								when abs(sum(JML_ORDER) - sum(JML_ORDER_TANPA_PEMBULATAN)) > 1 then 0
								when abs(sum(JML_ORDER) - sum(JML_ORDER_TANPA_PEMBULATAN)) < 0 then 0
								else abs(sum(JML_ORDER) - sum(JML_ORDER_TANPA_PEMBULATAN))
							end
							,sum(PENGURANG_PP) 
						from lpb_e 					
						where no_lpb = @pp_lalu
						group by no_reg,jenis_kelamin,kode_barang 
					
			end
		
	end

select rp.no_reg
	,max(rp.TGL_TRANSAKSI) lhkterkahir
into #z
from rhk_pakan rp
where rp.NO_REG = @noreg and rp.TGL_TRANSAKSI < @tgl_pp
GROUP BY rp.no_reg
set @query_total_pp = '
		select rk.NO_REG
				,le.KODE_BARANG
				,le.JENIS_KELAMIN
				,sum(le.jml_order) total_pp

		from  #z rk
		inner join lpb_e le
			on le.NO_REG = rk.no_reg 
		inner join lpb l
			on l.NO_LPB = le.NO_LPB and l.STATUS_LPB = ''A''' + @param +'
		group by rk.NO_REG
				,le.JENIS_KELAMIN
				,le.KODE_BARANG'

insert into @pakan_kirim_kandang
select rk.no_reg
	,kmd.KODE_BARANG
	,kmd.JENIS_KELAMIN
	,sum(abs(kmd.jml_order)) telah_kirim
from #z rk
inner join KANDANG_MOVEMENT_D kmd 
	on rk.NO_REG = kmd.NO_REG AND KETERANGAN1 = 'PENERIMAAN KANDANG' and kmd.TGL_TRANSAKSI <= rk.lhkterkahir and kmd.tgl_buat <= @tgl_pp
inner join  PENERIMAAN_KANDANG pk on pk.no_reg = rk.no_reg and kmd.KETERANGAN2 = pk.NO_PENERIMAAN_KANDANG
inner join order_kandang_e oke on oke.NO_REG = pk.NO_REG and oke.NO_ORDER = pk.no_order and oke.KODE_BARANG = kmd.KODE_BARANG and oke.TGL_KEBUTUHAN <= rk.lhkterkahir
group by rk.no_reg
		,kmd.KODE_BARANG
		,kmd.JENIS_KELAMIN
/*
INSERT INTO @pakan_kirim_dari_gudang
select rk.no_reg
	,le.KODE_BARANG
	,le.JENIS_KELAMIN
	,sum(abs(le.jml_order)) harus_kirim
from #z rk
inner join lpb_e le 
	on rk.NO_REG = le.NO_REG AND le.TGL_KEBUTUHAN <= rk.lhkterkahir
INNER JOIN lpb l  
    ON l.NO_LPB = le.NO_LPB AND l.STATUS_LPB = 'A'	
group by rk.no_reg
		,le.KODE_BARANG
		,le.JENIS_KELAMIN
*/		
-- cari tglkebutuhanakhir yang telah diplot perkandang

insert into @total_pp
exec(@query_total_pp)

-- cari konsumsi sampai dengan tgl rhkterakhir
insert into @konsumsi_pakan_total
select rk.no_reg
	,rp.KODE_BARANG
	,rp.JENIS_KELAMIN
	,sum(abs(rp.jml_pakai)) telah_terpakai
from #z rk
inner join rhk_pakan rp 
	on rk.NO_REG = rp.NO_REG and rp.TGL_TRANSAKSI <= rk.lhkterkahir
group by rk.no_reg
		,rp.KODE_BARANG
		,rp.JENIS_KELAMIN

insert into @retur_saat_pp 
select rsk.NO_REG
		,rski.KODE_PAKAN
		,rski.jenis_kelamin
		,sum(rskitp.JML_SAK) jml_retur
	from RETUR_SAK_KOSONG rsk	
	inner join RETUR_SAK_KOSONG_ITEM_PAKAN rski
		on rsk.id = rski.RETUR_SAK_KOSONG
	inner join RETUR_SAK_KOSONG_ITEM_TIMBANG_PAKAN rskitp
		on rskitp.RETUR_SAK_KOSONG_ITEM_PAKAN = rski.id
	WHERE rsk.NO_REG = @noreg and cast(rsk.TGL_BUAT as date) <= @tgl_pp and cast(rsk.TGL_BUAT as date) >= @tgl_pp_lama
	group by rsk.NO_REG ,rski.KODE_PAKAN, rski.jenis_kelamin

insert into @total_retur
select rsk.NO_REG
		,rski.KODE_PAKAN
		,rski.jenis_kelamin
		,sum(rskitp.JML_SAK) jml_retur
	from RETUR_SAK_KOSONG rsk	
	inner join RETUR_SAK_KOSONG_ITEM_PAKAN rski
		on rsk.id = rski.RETUR_SAK_KOSONG
	inner join RETUR_SAK_KOSONG_ITEM_TIMBANG_PAKAN rskitp
		on rskitp.RETUR_SAK_KOSONG_ITEM_PAKAN = rski.id
	where rsk.NO_REG = @noreg AND cast(rsk.TGL_BUAT as date) <= @tgl_pp
	group by rsk.NO_REG ,rski.KODE_PAKAN, rski.jenis_kelamin
/*
insert into @approve_retur_sak
select rhrs.NO_REG
	,rhrs.KEPUTUSAN
	,rhrs.RETUR_SAK_KOSONG
from REVIEW_HUTANG_RETUR_SAK rhrs
inner join (
	select rsk.no_reg,rsk.id from RETUR_SAK_KOSONG rsk 
	inner join (
		select max(tgl_buat) terakhir_kembali,no_reg from RETUR_SAK_KOSONG	group by no_reg	
	)rsk_akhir on rsk_akhir.NO_REG = rsk.NO_REG and rsk.TGL_BUAT = rsk_akhir.terakhir_kembali
)retur_terakhir on retur_terakhir.id = rhrs.RETUR_SAK_KOSONG and retur_terakhir.NO_REG = rhrs.NO_REG
*/
select yy.no_reg
		,yy.kode_barang
		,yy.jenis_kelamin
		,yy.nama_barang
		,yy.hutang_pp_sebelumnya
		,yy.hutang_retur_sak 
/*		,case 
			when yy.hutang_retur_sak > 0 
				then case yy.approve_hutang_retur_sak when 1 then 0 else yy.hutang_retur_sak end
			else 0		
		end pengurang_pp
	*/	
		,0 pengurang_pp
		,yy.hutang_pp_sebelumnya sisa_konsumsi	
		,yy.sisa_kandang	
		,yy.sisa_gudang	
from (
select rk.no_reg
		,tp.kode_barang
		,tp.jenis_kelamin
		,mb.nama_barang
		,coalesce(pkk.jumlah,0) - coalesce(kb.konsumsi,0) sisa_kandang
--		,coalesce(pkg.jumlah,0) - coalesce(pkk.jumlah,0) sisa_gudang
		,0 sisa_gudang
		,coalesce(hs.hutang_pp,0) hutang_pp_sebelumnya
		-- cari hutang retur pp terakhir, akumulasi hutang sak - pengurang pp sebelumnya
		,case 
			when (coalesce(kb.konsumsi,0) - coalesce(tr.jumlah,0)) < coalesce(hs.pengurang_pp,0) then 0
			else coalesce(kb.konsumsi,0) - coalesce(tr.jumlah,0) - coalesce(hs.pengurang_pp,0)
		end hutang_retur_sak
		-- jika 1 berarti dianggap sebagai pengurang
	/*	,case 
			when ars.keputusan = 'A' then 1
			else 0
			end approve_hutang_retur_sak
			*/
		
from #z rk
left join @total_pp tp
on rk.no_reg = tp.no_reg
left join m_barang mb
	on mb.KODE_BARANG = tp.kode_barang
left join @pakan_kirim_kandang pkk
	on pkk.no_reg = tp.no_reg and pkk.jenis_kelamin = tp.jenis_kelamin and pkk.kode_barang = tp.kode_barang
/*
left join @pakan_kirim_dari_gudang pkg
	on pkg.no_reg = tp.no_reg and pkg.jenis_kelamin = tp.jenis_kelamin and pkg.kode_barang = tp.kode_barang	
*/
left join @konsumsi_pakan_total kb
	on tp.no_reg = kb.no_reg  and tp.jenis_kelamin = kb.jenis_kelamin and tp.kode_barang = kb.kode_barang
left join @total_retur tr
	on tr.no_reg = tp.no_reg  and tr.jenis_kelamin = tp.jenis_kelamin and tr.kode_barang = tp.kode_barang
left join @retur_saat_pp rsp
	on rsp.no_reg = tp.no_reg  and rsp.jenis_kelamin = tp.jenis_kelamin and rsp.kode_barang = tp.kode_barang
left join @hutang_pp_sebelumnya hs
	on hs.no_reg = tp.no_reg and hs.jenis_kelamin = tp.jenis_kelamin and hs.kode_barang = tp.kode_barang 
-- left join @approve_retur_sak ars
--	on ars.no_reg = tp.no_reg
)yy

drop table #z

end



create procedure [dbo].[pp_bdy_pakan_tambahan_v3] (
	@noreg varchar(30),	
	@tgl_kebutuhan_awal date,
	@tgl_kebutuhan_akhir date,	
	@kode_pakan varchar(30)
)
as
begin
SET NOCOUNT ON;
declare @umur int,@pakan varchar(30) = @kode_pakan
declare @umur_awal int,@umur_akhir int,@std_budidaya varchar(20),@docin date
declare @tmp_akhir date, @tmp_awal date

declare @kebutuhan table(
	tgl_kebutuhan date,
	no_reg varchar(30)
)
/* cari docin dan standart yang digunakan */
select ks.*
into #ks
from kandang_siklus ks
where ks.no_reg = @noreg

set @tmp_akhir = @tgl_kebutuhan_akhir
set @tmp_awal = @tgl_kebutuhan_awal
	while(@tmp_awal <= @tmp_akhir) 
	begin
	insert into @kebutuhan
	select @tmp_awal,@noreg
	set @tmp_awal = dateadd(day,1,@tmp_awal)
	end
-- cari lhk terakhir
select rhk.tgl_transaksi
		,rhk.no_reg
		,rhk.C_JUMLAH populasi
into #lhk
from rhk
inner join(
	select max(tgl_transaksi) lhk_terakhir,rhk.no_reg
	from rhk
	join #ks ks on ks.no_reg = rhk.no_reg
	where rhk.tgl_buat <= getdate()
	group by rhk.no_reg
)r
on r.lhk_terakhir = rhk.tgl_transaksi and r.no_reg = rhk.no_reg

select ks.kode_kandang,
	@pakan kode_barang,
	0 kebutuhan_pakan_standart,
	0 kebutuhan_pakan,
	ks.no_reg,
	l.tgl_transaksi lhk_terakhir,
	0 as adg,
	0 as adg_standart,
	0 as kons,
	0 as kons_standart,
	coalesce(l.populasi,ks.jml_populasi) populasi,
	kb.tgl_kebutuhan tglkebutuhan,
	datediff(day,ks.tgl_doc_in,kb.tgl_kebutuhan) umur,
	mb.nama_barang nama_barang,
	dbo.BENTUK_CONVERTION(mb.bentuk_barang) bentuk,
	0 komposisi_pakan
from #ks ks
inner join m_barang mb
	on mb.KODE_BARANG = @pakan
left join @kebutuhan kb
	on kb.no_reg = ks.no_reg
left join #lhk l on l.no_reg = ks.no_reg
order by ks.no_reg

drop table #ks
drop table #lhk
end


-- =============================================
-- Author:		<Author, WJC>
-- Create date: <Create Date, 2019-11-22>
-- Description:	<Description, Get ADG based noreg and rhk transaction date>
-- =============================================
create FUNCTION [dbo].[ADG_VALUE] 
(
	-- Add the parameters for the function here
	@NO_REG VARCHAR(30)
	,@TGL_TRANSAKSI DATE
)
RETURNS FLOAT
AS
BEGIN
	-- Declare the return variable here
	DECLARE @RESULT FLOAT
 	IF @TGL_TRANSAKSI IS NULL  RETURN @RESULT
	DECLARE @UMUR INT
	DECLARE @BB_AWAL FLOAT, @BB_SEKARANG FLOAT 
	SET @UMUR = (SELECT DATEDIFF(DAY,(SELECT TGL_DOC_IN FROM KANDANG_SIKLUS WHERE NO_REG = @NO_REG),@TGL_TRANSAKSI) )
	
	IF @UMUR < 2
		BEGIN
			SET @BB_AWAL = (select top 1 BB_RATA2 from dbo.BAP_DOC where NO_REG = @NO_REG)
		END
	ELSE 
		BEGIN
			SET @BB_AWAL = (select top  1 C_BERAT_BADAN * 1000 from rhk where NO_REG = @NO_REG and TGL_TRANSAKSI = dateadd(day,-1,@TGL_TRANSAKSI) )
		END 
		
	SET @RESULT = (SELECT TOP  1 C_BERAT_BADAN * 1000 FROM RHK WHERE NO_REG = @NO_REG AND TGL_TRANSAKSI = @TGL_TRANSAKSI) - @BB_AWAL
	RETURN @RESULT

END


-- =============================================
-- Author:		<Author, WJC>
-- Create date: <Create Date, 2019-11-22>
-- Description:	<Description, Get ADG based noreg and rhk transaction date>
-- =============================================
create FUNCTION [dbo].[ADGSTANDART_VALUE] 
(
	-- Add the parameters for the function here
	@NO_REG VARCHAR(30)
	,@TGL_TRANSAKSI DATE
)
RETURNS FLOAT
AS
BEGIN
	-- Declare the return variable here
	DECLARE @RESULT FLOAT
 	IF @TGL_TRANSAKSI IS NULL  RETURN @RESULT
	DECLARE @UMUR INT
	DECLARE @BB_AWAL FLOAT, @BB_SEKARANG FLOAT 
	DECLARE @DOCIN DATE, @KODESTDBUDIDAYA VARCHAR(30)
	
	SELECT @DOCIN = TGL_DOC_IN,@KODESTDBUDIDAYA = KODE_STD_BUDIDAYA FROM KANDANG_SIKLUS WHERE NO_REG = @NO_REG
	SET @UMUR = (SELECT DATEDIFF(DAY,@DOCIN,@TGL_TRANSAKSI) )
	
	IF @UMUR < 2
		BEGIN
			SET @BB_AWAL = (select top 1 BB_RATA2 from dbo.BAP_DOC where NO_REG = @NO_REG)
		END
	ELSE 
		BEGIN
			SET @BB_AWAL = (select top  1 TARGET_BB from dbo.M_STD_BUDIDAYA_D where KODE_STD_BUDIDAYA = @KODESTDBUDIDAYA and STD_UMUR = @UMUR - 1 )
		END 
		
	SET @RESULT = (select top  1 TARGET_BB from dbo.M_STD_BUDIDAYA_D where KODE_STD_BUDIDAYA = @KODESTDBUDIDAYA and STD_UMUR = @UMUR) - @BB_AWAL
	RETURN @RESULT

END



alter table dbo.review_lpb_budidaya alter column ket_review varchar(max)